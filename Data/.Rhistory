bmore<- baltimore %>%
rename(tract_fips= tract_id,
population=population)%>%
mutate(poverty_rate= pop_poverty/population,
pop_density= population/land_area,
region_new=recode(fake_region,
`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"))%>%
pop_category = cut(total_pop,
breaks=c(0, 2062, 2917, 3862, 6612),
labels=c("Q1","Q2","Q3","Q4")) %>%
select(-tract_name, -fake_region) %>%
filter(region_new == "Region1" | region_new == "Region3")
bmore<- baltimore %>%
rename(tract_fips= tract_id,
population=population)%>%
mutate(poverty_rate= pop_poverty/population,
pop_density= population/land_area,
region_new=recode(fake_region,
`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"))%>%
pop_category = cut(population,
breaks=c(0, 2062, 2917, 3862, 6612),
labels=c("Q1","Q2","Q3","Q4")) %>%
select(-tract_name, -fake_region) %>%
filter(region_new == "Region1" | region_new == "Region3")
bmore<- baltimore %>%
rename(tract_fips= tract_id,
population=population)%>%
mutate(poverty_rate= pop_poverty/population,
pop_density= population/land_area,
region_new=recode(fake_region,
`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"))%>%
pop_category = cut(population,
breaks=c(0, 2062, 2917, 3862, 6612),
labels=c("Q1","Q2","Q3","Q4")) %>%
select(-tract_name, -fake_region) %>%
filter(region_new == "Region1" | region_new == "Region3")
bmore <- baltimore %>% # %>% means piping, or carry previous object to next step
rename(tract_fips = tract_id, # new name = current name
total_pop = population) %>% # tidyverse does not require $ when dealing with column names
mutate(poverty_rate = pop_poverty/total_pop, #creating new variables
pop_density = total_pop/area,
region_new = recode(fake_region, # recoding regions to something more descriptive
`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"),
pop_category = cut(total_pop,
breaks=c(0, 2062, 2917, 3862, 6612), # recategorizing population by quartile (run summary)
labels=c("Q1","Q2","Q3","Q4"))) %>%
select(-tract_name, -fake_region) %>% # delete certain columns, alternatively, keep certain columns without the - sign
filter(region_new == "Region1" | region_new == "Region3")
bmore <- baltimore %>% # %>% means piping, or carry previous object to next step
rename(tract_fips = tract_id, # new name = current name
total_pop = population) %>% # tidyverse does not require $ when dealing with column names
mutate(poverty_rate = pop_poverty/total_pop, #creating new variables
pop_density = total_pop/area,
region_new = recode(fake_region, # recoding regions to something more descriptive
`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"),
pop_category = cut(total_pop,
breaks=c(0, 2062, 2917, 3862, 6612), # recategorizing population by quartile (run summary)
labels=c("Q1","Q2","Q3","Q4"))) %>%
select(-tract_name, -fake_region) %>% # delete certain columns, alternatively, keep certain columns without the - sign
filter(region_new == "Region1" | region_new == "Region3")
ggplot(dat2010, aes(x=pop)) +
geom_histogram(col="black",
fill="#225566",
alpha = .5,
binwidth = 200) +
labs(x="population", y="counts") +
ggtitle("Population 2010")
dat2010 %>% mutate(perc.white = pop_white_nonhispanic/pop,
majority = cut(perc.white,
breaks = c(0, 0.5, 1),
labels = c("nonwhite", "white"))) %>%
filter(majority == "white") %>%
ggplot(aes(x=pop)) +
geom_histogram(col="black", fill="white",alpha = .5, binwidth = 200) +
labs(x="population", y="counts") +
ggtitle("Population 2010")
dat2000 %>%
mutate(perc.white = pop_white_nonhispanic/pop,
majority = cut(perc.white,
breaks = c(0, 0.5, 1),
labels = c("nonwhite", "white"))) %>%
drop_na(majority) %>%
ggplot(., aes(x = pop, y = pop_plus10, color = majority)) +
geom_point(size = 2) +
scale_color_manual(values=c("#999999", "#E69F00")) +
xlim(0, 8000) +
labs(x="pop 2000", y="pop 2010") +
geom_smooth(method = "lm", color = "red", se=FALSE)
dat2010 %>% mutate(perc.white = pop_white_nonhispanic/pop,
majority = cut(perc.white,
breaks = c(0, 0.5, 1),
labels = c("nonwhite", "white"))) %>%
drop_na(majority) %>%
ggplot(., aes(x=majority, y=median_hh_income,
fill = majority)) +
geom_boxplot(alpha = 0.7) +
labs(x="Race", y="Median HH Income") +
scale_fill_manual(values=c("#336699", "#666666"))
library(tidyverse)
setwd("/Users/apple/Desktop/CPLN501")
library(tidyverse)
setwd("/Users/apple/Desktop/CPLN501")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(nngeo)
library(units)
library(pacman)
library(lubridate)
library(tidycensus)
#set the API key
census_api= "7ef485ab67cffa9e33a4d14f97aae395bb5c011c"
census_api_key(census_api, install = TRUE)
acs_2022 <- load_variables(2022, dataset="acs5")
acsVaraibles <- c(totpop = "B01001_001",
tot_commute="B08006_001",
bikers ="B08006_014",
median_age="B01002_001"
)
Philiy_acs_2022 <- get_acs(geography="tract",
variables=acsVaraibles,
state="PA",
county="Philadelphia",
survey='acs5',
year=2022,
output="wide",
geometry=TRUE)
View(Philiy_acs_2022)
Philiy_acs_2022 <- Philiy_acs_2022 %>%
mutate(bike_rate = bikers/tot_commute)
Philiy_acs_2022 <- Philiy_acs_2022 %>%
mutate(bike_rate = bikersE/tot_commuteE)
st_write(Philiy_acs_2022, "Philiy_acs_2022.gpkg")
ibrary(ggplot2)
library(ggplot2)
# Create the data
flow <- seq(0, 2000, length.out = 100)
speed <- ifelse(flow <= 500, 60,
ifelse(flow <= 1000, 60 - 0.03 * (flow - 500),
ifelse(flow <= 1500, 45 - 0.04 * (flow - 1000),
30 - 0.02 * (flow - 1500))))
# Create a data frame
data <- data.frame(flow = flow, speed = speed)
ggplot(data, aes(x = flow, y = speed)) +
geom_line(color = "blue") +
geom_vline(xintercept = c(300, 700, 1000, 1300, 1600, 1800),
linetype = "dashed",
color = c("green", "lime", "yellow", "orange", "red", "darkred"))
ggplot(data, aes(x = flow, y = speed))
ggplot(data, aes(x = flow, y = speed)) +
geom_line(color = "blue") +
geom_vline(xintercept = c(300, 700, 1000, 1300, 1600, 1800),
linetype = "dashed",
color = c("green", "lime", "yellow", "orange", "red", "darkred")) +
annotate("text", x = c(100, 500, 850, 1150, 1450, 1700),
y = c(62, 62, 50, 45, 35, 25),
label = c("A", "B", "C", "D", "E", "F"),
color = c("green", "lime", "yellow", "orange", "red", "darkred"),
size = 4) +
labs(title = "Speed-Flow Diagram for a Major One-Way, Two-Lane Urban Arterial",
x = "Flow (vehicles per hour)",
y = "Speed (km/h)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(limits = c(0, 2000)) +
scale_y_continuous(limits = c(0, 65)) +
theme(panel.grid.major = element_line(size = 0.8),
panel.grid.minor = element_line(size = 0.5))
ggplot(data, aes(x = flow, y = speed)) +
geom_line(color = "blue") +
geom_vline(xintercept = c(300, 700, 1000, 1300, 1600, 1800),
linetype = "dashed",
color = c("green", "blue", "yellow", "orange", "red", "darkred")) +
annotate("text", x = c(100, 500, 850, 1150, 1450, 1700),
y = c(62, 62, 50, 45, 35, 25),
label = c("A", "B", "C", "D", "E", "F"),
color = c("green", "blue", "yellow", "orange", "red", "darkred"),
size = 4) +
labs(title = "Speed-Flow Diagram for a Major One-Way, Two-Lane Urban Arterial",
x = "Flow (vehicles per hour)",
y = "Speed (km/h)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(limits = c(0, 2000)) +
scale_y_continuous(limits = c(0, 65)) +
theme(panel.grid.major = element_line(size = 0.8),
panel.grid.minor = element_line(size = 0.5))
View(data)
ggplot(data, aes(x = flow, y = speed)) +
geom_point(color = "blue") +
geom_vline(xintercept = c(300, 700, 1000, 1300, 1600, 1800),
linetype = "dashed",
color = c("green", "blue", "yellow", "orange", "red", "darkred")) +
annotate("text", x = c(100, 500, 850, 1150, 1450, 1700),
y = c(62, 62, 50, 45, 35, 25),
label = c("A", "B", "C", "D", "E", "F"),
color = c("green", "blue", "yellow", "orange", "red", "darkred"),
size = 4) +
labs(title = "Speed-Flow Diagram for a Major One-Way, Two-Lane Urban Arterial",
x = "Flow (vehicles per hour)",
y = "Speed (km/h)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(limits = c(0, 2000)) +
scale_y_continuous(limits = c(0, 65)) +
theme(panel.grid.major = element_line(size = 0.8),
panel.grid.minor = element_line(size = 0.5))
year <- c(1950, 1960, 1970, 1980, 1990, 2000, 2010)
population <- c(2071605,2002512,1948609,1688210,1585577,1517550,1526006)
dat <- cbind.data.frame(year, population)
mod.1 <- lm(population ~ year, data = dat)
summary(mod.1)
mod.2 <- lm(population ~ year+I(year^2) , data =dat)
summary(mod.2)
mod.3 <- lm(population ~ year + pop_lag, data = dat)
ASK: finally, let's try a model with lag
library(tidyverse)
#first, let's create a population with 10 year lag (i.e., shifting one row down)
dat <- dat %>% mutate(pop_lag = lag(population, 1))
mod.3 <- lm(population ~ year + pop_lag, data = dat)
summary(mod.3)
library(tidyverse)
library(sf)
library(tidycensus)
pluto <- st_read("labs_exercises/flood_risk_spatial_join/data/MapPLUTO24v3_1.gdb",
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- st_read("MapPLUTO24v3_1.gdb",
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- st_read("MapPLUTO24v3_1.gdb",
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- st_read(("MapPLUTO24v3_1.gdb"),
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- st_read(("MapPLUTO24v3_1.gdb"),
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- st_read(("/Users/apple/Desktop/CPLN503/in_class_excercise/In_class_excercise_octo17th/MapPLUTO24v3_1.gdb"),
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- pluto %>%
mutate(ARA = case_when(ResArea == 0 & UnitsRes != 0 ~ 1 * (BldgArea * (UnitsRes/UnitsTotal)) + ResArea,
ResArea > 0 ~ ResArea,
TRUE ~ 0))
bk_bg <- get_acs(geography = "block group",
variables = c(bg_tot_pop = "B03002_001",
bg_white_nh = "B03002_003" ,
bg_black_nh = "B03002_004",
bg_asian_nh = "B03002_006" ,
bg_native_hawaiian = "B03002_007",
bg_other_nh = "B03002_008",
bg_two_more_nh = "B03002_009",
bg_hispanic = "B03002_012"),
year = 2021, output = "wide",
geometry = TRUE, state = "NY",
county = "Kings", survey = "acs5",
progress = FALSE)
bk_tracts <-get_acs(geography = "tract",
variables = c(tract_tot_pop = "B03002_001",
tract_white_nh = "B03002_003",
tract_black_nh = "B03002_004",
tract_asian_nh = "B03002_006",
tract_native_hawaiian = "B03002_007",
tract_other_nh = "B03002_008" ,
tract_two_more_nh = "B03002_009",
tract_hispanic = "B03002_012" ),
year = 2021, output = "wide",
geometry = TRUE, state = "NY",
county = "Kings", survey = "acs5",
progress = FALSE)
pluto <- st_transform(pluto, crs = st_crs(bk_bg))
pluto <- pluto %>%
st_join(bk_bg %>% select(block_group_2021 = GEOID, 3, 5, 7, 9, 11, 13, 15, 17))
pluto <- pluto %>%
st_join(bk_tracts %>%
select(tract_2021 = GEOID, 3, 5, 7, 9, 11, 13, 15, 17))
pluto <- pluto %>%
select(Borough, Address, OwnerName, LotArea, BldgArea,
ResArea, UnitsRes, ARA, block_group_2021,
starts_with("bg_"), tract_2021, starts_with("tract_"))
bk_bg_units <- pluto |>
as_tibble() |>
group_by(block_group_2021) |>
summarise(bg_res_units = sum(UnitsRes, na.rm = TRUE),
bg_ARA = sum(ARA, na.rm = TRUE))
bk_tract_units <- pluto |>
as_tibble() |>
group_by(tract_2021) |>
summarise(tract_res_units = sum(UnitsRes, na.rm = TRUE),
tract_ARA = sum(ARA, na.rm = TRUE))
pluto <- pluto |>
left_join(bk_bg_units)
pluto <- pluto |>
left_join(bk_tract_units)
pluto <- pluto %>%
ungroup() %>%
mutate(bg_tot_dasym = case_when(UnitsRes == 0 & ResArea != 0 ~
bg_tot_popE * (ARA/bg_ARA),
UnitsRes > 0 ~ bg_tot_popE * (UnitsRes/bg_res_units),
TRUE ~ 0),
tract_tot_dasym = case_when(UnitsRes == 0 & ResArea != 0 ~
tract_tot_popE * (ARA/tract_ARA),
UnitsRes > 0 ~ tract_tot_popE * (UnitsRes/tract_res_units),
TRUE ~ 0))
tract_ru_totals <- pluto |>
as_tibble() |>
group_by(tract_2021) |>
summarise(tract_ru_est = sum(tract_tot_dasym, na.rm = TRUE))
tract_ru_totals <- tract_ru_totals |>
inner_join(bk_tracts |>
select(GEOID, tract_tot_popE), by = c("tract_2021" = "GEOID"))
floods <- st_read("https://data.cityofnewyork.us/api/geospatial/ezfn-5dsb?method=export&format=GeoJSON", )
floods <- st_make_valid(floods)
floods <- floods |>
st_transform(crs = st_crs(pluto)) |>
st_union(by_feature = FALSE) |>
st_as_sf()
floods <- floods |>
mutate(flood_plain = "100-Year") |>
rename(geometry = x)
bk_bg_floods <- bk_bg |>
st_join(floods) |>
as_tibble() |>
group_by(flood_plain) |>
summarise(flood_pop_bg = sum(bg_tot_popE, na.rm = TRUE)) |>
mutate(flood_plain = if_else(is.na(flood_plain), "Not in plain", flood_plain))
bk_tract_flood <- bk_tracts |>
st_join(floods) |>
as_tibble() |>
group_by(flood_plain) |>
summarise(flood_pop_tract = sum(tract_tot_popE, na.rm = TRUE)) |>
mutate(flood_plain = if_else(is.na(flood_plain), "Not in plain", flood_plain))
pluto_res <- pluto |>
filter(bg_tot_dasym > 0 | tract_tot_dasym > 0)
pluto_non_res <- pluto |>
filter((is.na(ResArea) | ResArea == 0) & (UnitsRes == 0 | is.na(UnitsRes)))
pluto_floods <- pluto_res |>
st_join(floods)
pluto_floods <- pluto_floods |>
as_tibble() |>
group_by(flood_plain) |>
summarise(flood_pop_bg_dasym = sum(bg_tot_dasym, na.rm = TRUE),
flood_pop_tract_dasym = sum(tract_tot_dasym, na.rm = TRUE)) |>
mutate(flood_plain = if_else(is.na(flood_plain), "Not in plain", flood_plain))
pluto_floods <- pluto_floods |>
left_join(bk_tract_flood) |>
left_join(bk_bg_floods)
View(pluto_floods)
library(tidyverse)
setwd("/Users/apple/Desktop/CPLN550/Data")
hh <- read.csv("1_Household_Public.csv")
per <- read.csv("2_Person_Public.csv")
veh <- read.csv("3_Vehicle_Public.csv")
trip <- read.csv("4_Trip_Public.csv")
load("data.Rda")
# 1.	Using the 2012 Philadelphia household travel survey, plot a histogram of the total number of trips people made (P_TOT_TRIPS).
# Describe the distribution of trip-making.
ggplot(per, aes(x=P_TOT_TRIPS))+
geom_histogram(binwidth= 1, fill="blue", color="black") +
labs(title="Histogram of Total Number of Trips People Made", x="Total Number of Trips", y="Frequency")
hist(per$P_TOT_TRIPS,
breaks = 20,  # Adjust the number of breaks as needed
col = "skyblue",
border = "black",
main = "Distribution of Total Trips in Philadelphia Travel Survey",
xlab = "Total Number of Trips",
ylab = "Frequency")
Per_no_trip<- per %>%
select(no_trip)
per$no_trip <- as.integer(per$P_TOT_TRIPS == 0)
Per_no_trip<- per %>%
select(no_trip)
sum(Per_no_trip$no_trip)
per_hh<- left_join(per, hh, by = "HH_ID")
per_hh <- per_hh %>%
filter(INCOME != 98) %>%
filter(INCOME != 99) %>%
filter(AGECAT != 98) %>%
filter(AGECAT != 99)
per_hh <-per_hh %>%
mutate(age= case_when(AGECAT==1 ~ "Under 5",
AGECAT==2 ~ "6-12",
AGECAT==3 ~ "13-15",
AGECAT==4 ~ "16-17",
AGECAT==5 ~ "18-24",
AGECAT==6 ~ "25-34",
AGECAT==7 ~ "35-44",
AGECAT==8 ~ "45-54",
AGECAT==9 ~ "55-64",
AGECAT==10 ~ "65-74",
AGECAT==11 ~ "75-84",
AGECAT==12 ~ "85+"))
per_hh$age <- factor(per_hh$age, levels = c("Under 5",
"6-12",
"13-15",
"16-17",
"18-24",
"25-34",
"35-44",
"45-54",
"55-64",
"65-74",
"75-84",
"85+"))
per_hh<-per_hh %>%
mutate(income= case_when(INCOME==1 ~ "Under $10,000",
INCOME==2 ~ "$10,000-$24,999",
INCOME==3 ~ "$25,000-$34,999",
INCOME==4 ~ "$35,000-$49,999",
INCOME==5 ~ "$50,000-$74,999",
INCOME==6 ~ "$75,000-$99,999",
INCOME==7 ~ "$100,000-$149,999",
INCOME==8 ~ "$150,000-$199,999",
INCOME==9 ~ "$200,000-$249,999",
INCOME==10 ~ "$250,000 or more"))
per_hh$income <- factor(per_hh$income, levels = c("Under $10,000",
"$10,000-$24,999",
"$25,000-$34,999",
"$35,000-$49,999",
"$50,000-$74,999",
"$75,000-$99,999",
"$100,000-$149,999",
"$150,000-$199,999",
"$200,000-$249,999",
"$250,000 or more"))
per_hh <- per_hh %>%
filter(RACE!=98) %>%
filter(RACE!=99)%>%
filter(RACE!= 988)%>%
filter(RACE!=999)
per_hh <- per_hh %>%
mutate(race= case_when(RACE==1 ~ "White",
RACE==2 ~ "Black",
RACE==3 ~ "Hispanic",
RACE==4 ~ "Indian or Alaska Native",
RACE==5 ~ "Asian",
RACE==6 ~ "Hawaiian or Pacific Islander",
RACE==97 ~ "Other",
RACE==100 ~ "Multi-Racial",
))
per_hh$race <- factor(per_hh$race,levels=c("White",
"Black",
"Hispanic",
"American Indian or Alaska Native",
"Asian",
"Hawaiian or Pacific Islander",
"Other",
"Multi-Racial"))
##  people who take trip age distribution
per_hh_travel <- per_hh %>%
filter(no_trip ==0)
ggplot(per_hh_travel, aes(x=age))+
geom_bar(position="dodge")+
labs(title="Age Distribution of People Who Took Trips", x="Age Category", y="Frequency")
ggplot(per_hh_travel, aes(x=income))+
geom_bar(position="dodge")+
labs(title="Income Distribution of People Who Took Trips", x="Income Category", y="Frequency")
ggplot(per_hh_travel, aes(x=race, fill=race))+
geom_bar(position="dodge")+
labs(title="Race Distribution of People Who Took Trips",x="RACE Category", y="Frequency")
##  people who did not take trip age distribution
per_hh_no_travel <- per_hh %>%
filter(no_trip ==1)
ggplot(per_hh_no_travel, aes(x=age))+
geom_bar(position="dodge")+
labs(title="Age Distribution of People Who Did Not Take Trips", x="Age Category", y="Frequency")
ggplot(per_hh_no_travel, aes(x=income))+
geom_bar(position="dodge")+
labs(title="Income Distribution of People Who Did Not Take Trips", x="Income Category", y="Frequency")
ggplot(per_hh_no_travel,aes(x=race, fill=race))+
geom_bar(position="dodge")+
labs(title="Race Distribution of People Who Did Not take Trips",x="Race Category", y="Frequency")
per_hh_age <- per_hh %>%
group_by(age) %>%
summarise(count = n(),
percentage = n()/nrow(per_hh))
View(Per_no_trip)
per_hh_travel_age <- per_hh_travel %>%
group_by(age) %>%
summarise(per=n()/nrow(per_hh_travel))
View(per_hh_travel_age)
per_hh_no_travel_age <- per_hh_no_travel %>%
group_by(age) %>%
summarise(per=n()/nrow(per_hh_no_travel))
View(per_hh_no_travel_age)
per_hh_no_travel_income <- per_hh_no_travel %>%
group_by(income) %>%
summarise(per=n()/nrow(per_hh_no_travel))
View(per_hh_no_travel_income)
per_hh_no_travel_race <- per_hh_no_travel %>%
group_by(race) %>%
summarise(per=n()/nrow(per_hh_no_travel))
View(per_hh_no_travel_race)
per_hh_travel_income <- per_hh_travel %>%
group_by(income) %>%
summarise(per=n()/nrow(per_hh_travel))
View(per_hh_travel_income)
per_hh_travel_race <-per_hh_travel %>%
group_by(race) %>%
summarise(per=n()/nrow(per_hh_travel))
View(per_hh_travel_race)
